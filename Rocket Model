import numpy as np
import matplotlib.pyplot as plt
import math
from scipy.optimize import fsolve

# Constants
a = 5.132                                   #mm/s/MPa
n = 0.222                                   # -
R_int = 12.5E-3                             # m Initial radius
R_max = 38.4E-3                             # m max radius
Len_grain = 0.107                           # m length of grain
Prop_den = 1841                             # kg/m^3 propellant density
Dt = 7.8E-3                                 # m throat diameter
De = 16.74E-3                               # m nozzle exit diameter
At = np.pi * (Dt/2)**2                      # m^2 throat area
Ae = np.pi * (De/2)**2                      # M^2 nozzle exit
R = 206.3                                   # 206.3E+6 # m^2 s^-2 K^-1 specific gas constant
Tc = 1558.722                               # k Chamber temperature
c = 908                                     # 908E+3 #911E+3 # m/s characteristic velocity
alp = 0.1 * 2*np.pi/360                     # rads burn angle
index = 0                                   # not used
gam = 1.1209                                # ratio of specific heats
Gam = np.sqrt(gam) * (2/(gam + 1)) ** ((gam + 1)/(2 * (gam - 1))) # Vandenkerckhove constant
Ae_At_giv = Ae/At
sigma = 5.67 * 10**(-8)                     # stefan boltzman constant
M_w = 40.41                                 #[g/mol], molar weight of propellant.
c_p_flame = 2.4321                          #[kJ/kg/K] specific heat of flame at constant pressure
Pr_flame = 4*gam / (9*gam - 5)              # approximation for the Prandtl number
k_flame = 0.4015                            # thermal conductivity of hot flame in engine
mu_flame = k_flame * Pr_flame / c_p_flame   # dynamic viscosity of flame
v_c = 122                                   #[m/s], flow velocity, assume a number/guess from literature.
k_grain = 0.4015                            # W/mK conductivity through grain
k_wall = 237                                # W/mK conductivity through wall (Al?)
t_wall = 0.005                              # m wall thickness
efficiency = 0.66                           # efficiency of heat going into propulsion vs. heat produced
e_grain = 0.2                               # emissivity of the grain, needs a value!
a_grain = 0.8                               # absorptivity of the grain, needs a value!
H_grain = 4.7E6                                   # J/kg heat from grain
M_propellant = 0.758                        # mass of propellant [kg]
T_amb = 298                                 # K ambient temperature


# initial values
Pc = 2E+6                                   #101325 # Pa chamber pressure
Pa = 101325                                 # Pa atmospheric pressure
dt = 0.001                                  # s time interval
w = 0                                       # web thickness
Vc = np.pi * (R_int**2) * Len_grain         # combustion volume
t = 0                                       # time not used
T_grain_init = 300                          #[K]
t_init = R_max - R_int                      # initial grain thickness, R_max - R_inner at start of burn
A_chamber = 2*np.pi*(R_max+t_wall)*Len_grain #Surface area on the outside of the chamber

# Data Arrays
Time = []
Reg = []
w_value = []
ChamPres = []
Momentum = []
OuterTemp = []

# Functions
def dw_dt(Pc):
    dw = r(Pc)

    return dw

def r(Pc): # converts to mm and Mpa then converts back to give r in m/s
    r_val = a * ((Pc * 1E-6) ** n)

    return r_val * 1E-3

def Ab(w): # calculates the burn area
    global state
    """
    if (w + R_int) < R_max:
        A = (2 * np.pi * (R_int + w) * Len_grain)
    else:
        A = 0
    """
    if w < Len_grain*np.tan(alp):
        A = (np.pi * (2*R_int + w) * w)/np.sin(alp)
        state = 1

    elif Len_grain*np.tan(alp) < w < R_max - R_int:
        A = (R_int + w) * (2*np.pi*Len_grain)/np.cos(alp) - np.pi * Len_grain**2 * (np.tan(alp)/np.cos(alp))
        state = 2

    elif R_max - R_int < w < R_max - R_int + Len_grain*np.tan(alp):
        x = R_int + w - Len_grain*np.tan(alp)
        A = (np.pi*(R_max + x)*(R_max - x))/np.sin(alp)
        state = 3

    else:
        A = 0
        state = 4
    
    return A

def dv_dt(Pc,w):
    dv = r(Pc) * Ab(w)

    return dv

def dPc_dt(Vc,Pc,w):
    dPc = ((R * Tc)/Vc) * (Prop_den * r(Pc) * Ab(w) - (Pc * At)/c) - (Pc/Vc)*dv_dt(Pc,w)

    return dPc


def convective_heat_flux(p_c, T_c, A_burn, k, Pr, mu, T_2): #based on equation 3.5 on page 172 of the TRP reader
    D_c = A_burn / (np.pi * Len_grain)          # flame diameter (2x radius of grain that is burning)

    # Convective heat flux coefficient
    h_a = 0.023 * p_c**0.8 * (v_c / (R * T_c))**0.8 * (1 / D_c)**0.2 * (k * Pr**0.33 / mu**0.8)

    q_conv = h_a * (T_c - T_2)                  # T_2 is the temperature of the solid, in this case the grain temp

    return q_conv

def radiative_heat_flux(e2, a2, T_1, T_2):  #based on equation 3.25 on page 176 of the TRP reader
    q_rad = a2 * sigma * T_1**4 - e2 * sigma * T_2**4       # T_1 is the flame temperature, T_2 that of the grain

    # in the future, this equation could switch to the flame radiating onto the motor casing immediately in the final
    # moments of the burn
    return q_rad

def updated_regression_rate(Pc, Tc, Gam, At, Prop_den, R, w):
    c_star = np.zeros(np.shape(Pc))
    updated_r = np.zeros(np.shape(Pc))
    for i in range(0, len(Pc)):
        c_star[i] = (1 / Gam[i]) * np.sqrt(R[i] * Tc[i])
        if Ab(w[i]) > 0 and Ab(w[i]) < 0.05:
            updated_r[i] = (np.asarray(Pc[i]) * At) / (Prop_den * 0.01 * c_star[i])
        elif Ab(w[i]) == 0:
            updated_r[i] = 0
        else:
           updated_r[i] = (np.asarray(Pc[i]) * At) / (Prop_den * Ab(w[i]) * c_star[i])
    
    return updated_r

# def T_o_solver(T_o, Q_dot, k_eff, t_grain): #Solver for determination of T_o, also taking into account that the chamber cools down due to radiation
#     r_i = R_max-t_grain
#     r_o = R_max+t_wall
#     return Q_dot/A_chamber - (2*np.pi*k_eff*Len_grain*(Tc-T_o))/(A_chamber*np.log(r_o/r_i)) - e_grain*sigma*T_o**4 + sigma*T_amb**4

def T_o_solver(x): #Solver for determination of T_o, also taking into account that the chamber cools down due to radiation
    r_i = R_max-x[3]
    r_o = R_max+t_wall
    return np.array([x[1]/A_chamber - (2*np.pi*x[2]*Len_grain*(Tc-x[0]))/(A_chamber*np.log(r_o/r_i)) - e_grain*sigma*x[0]**4 + sigma*T_amb**4,0,0,0])

def T_outside(t_current, updated_r,w):
    T_out = np.array([T_amb, 0, 0,0])
    T_casing = []
    for i in range(0, len(updated_r)):
        t_grain = t_current - updated_r[i]*dt
        Q_dot = H_grain*updated_r[i]*(Prop_den*w*math.pi*(R_max-t_grain)**2)
        # Q_dot = q_conv+q_rad * A
        
        if t_grain > 0:                             # make sure that this calculation is only being done when the grain is present
            k_eff = (k_wall * k_grain) / (k_wall * t_wall + k_grain * t_grain)      # total heat conduction coefficient
        else:
            k_eff = k_wall                          # if there is no grain, the only heat transfer is through the wall
        # For this to work the convective and radiative heat flux should be changed too, so we cannot do this right now.
        # Also, will t_grain ever be zero?
        
        T_out = fsolve(T_o_solver, np.array([T_out[0], Q_dot, k_eff, t_grain]))  # solving the temperature function
        #T_out = T_c - (1-efficiency)*(Q_dot / (2 * math.pi * k_eff * Len_grain)) * math.log((R_max + t_wall) / t_grain) # old function w/o radiation to environment

        T_casing.append(T_out[0])
    return T_casing


def Pe_Pc():        # Calculation of the Pe/Pc through iterative process. Run this once at startup
    Ae_At_cal_arr = []
    Pe_Pc_arr = []
    global Pe_Pc
    for Pe_Pc_cal in np.arange(0.00001, 0.1, 0.00001): # Guess a pressure ratio
        Ae_At_cal = Gam / np.sqrt((2 * gam) / (gam - 1) * Pe_Pc_cal ** 2 / gam * (1 - Pe_Pc_cal ** ((gam - 1) / gam)))

        Pe_Pc_arr.append(Pe_Pc_cal)
        Ae_At_cal_arr.append(Ae_At_cal)

    Pe_Pc = None

    for Ae_At in Ae_At_cal_arr:     # Compare area ratio calculated with the given area ratio
        if Ae_At_giv * 0.9999 < Ae_At < Ae_At_giv * 1.0001:
            Ae_index = Ae_At_cal_arr.index(Ae_At)
            Pe_Pc = Pe_Pc_arr[Ae_index]     # if the area ratio is roughly the same, store it in this variable

def Massflow(volume):
    m_flow = volume * Prop_den
    return m_flow       # [kg/s]


def Jet_Velocity(Pe_Pc):
    global V_eq
    V_eq = np.sqrt(2*gam/(gam-1) * R * Tc * (1 - Pe_Pc**(gam-1/gam)))

def Jet_Power(massflow, w):     # Jet power per timestep; Inputs: massflow, jet velocity
    P_jet = 0.5 * massflow * w**2
    return P_jet


# Begin of simulation
t_grain = t_init
# T_out = T_amb

# Create global variables
Pe_Pc()                 # Pe_Pc
Jet_Velocity(Pe_Pc)     # V_eq



for t in np.arange(0,6,dt):
    # do calculations

    w = w + dw_dt(Pc)*dt

    Vc = Vc + dv_dt(Pc,w)*dt

    Pc = Pc + dPc_dt(Vc,Pc,w)*dt

    E_jet_dt = Jet_Power(Massflow(dv_dt(Pc,w)),V_eq)*dt # Jet Energy in this particular timestep

    # updated_r = updated_regression_rate(Pc, Tc, Gam, At, Prop_den, R, w)

    # grab data
    Time.append(t)
    Reg.append(r(Pc))
    w_value.append(w)
    ChamPres.append(Pc)
    # OuterTemp.append(T_out)

    # calculate and store momentum
    Momentum.append(Massflow(dv_dt(Pc,w)) * V_eq * dt)      # momentum according to F = m w and Momentum = F tb, where tb is now dt
    # Momentum.append(Prop_den * Reg[-1] * Ab(w) * w * Len_grain)

# Using RPA Lite, I create an array of Tc, Gam, and R based on the input chamber pressure.
prop_1 = np.loadtxt("Public Projects\Exercise-TRP\RPA_Lite\properties_1.txt")
prop_2 = np.loadtxt("Public Projects\Exercise-TRP\RPA_Lite\properties_2.txt")
prop_3 = np.loadtxt("Public Projects\Exercise-TRP\RPA_Lite\properties_3.txt")
Tc_RPA = np.concatenate((prop_1[:, 5], prop_2[:, 5], prop_3[:, 5]))
gam_RPA = np.concatenate((prop_1[:, 7], prop_2[:, 7], prop_3[:, 7]))
Gam_RPA = np.multiply((np.sqrt(gam_RPA)), np.power((1 + gam_RPA)/2, -(1 + gam_RPA) / (2*(gam_RPA - 1))))
R_RPA = np.concatenate((8.314 / (prop_1[:, 6] / 1000), 8.314 / (prop_2[:, 6] / 1000), 8.314 / (prop_3[:, 6] / 1000)))

reg_adjusted = updated_regression_rate(ChamPres[:5991], Tc_RPA, Gam_RPA, At, Prop_den, R_RPA, w_value)

T_outer = T_outside(t_grain, reg_adjusted, w)

reg_av = np.mean(Reg[0:3751])
reg_adj_av = np.mean(reg_adjusted[0:3751])
area=[]
for i in range(0, len(w_value)):
    area.append(Ab(w_value[i]))
burn_time = M_propellant / (Prop_den * reg_av * np.mean(area[0:3751]))
burn_time_adj = M_propellant / (Prop_den * reg_adj_av * np.mean(area[0:3751]))
print(f"Burn time without additive: {round(burn_time, 2)} s")
print(f"Burn time with additive: {round(burn_time_adj, 2)} s")

# plot regression rate
plt.figure()
plt.plot(Time[0:5991], reg_adjusted, 'c')
plt.title('Regression Rate with Additive')
plt.xlabel('Time (s)')
plt.ylabel('Regression Rate (m/s)')

# plot outer temperature
plt.figure()
plt.plot(Time[0:5991], T_outer, 'c')
plt.xlabel('Time (s)')
plt.ylabel('Outer Temperature (K)')


# plot data
fig, ax = plt.subplots(2, 2, figsize=(12, 8))
ax[0][0].set_title("Chamber Pressure Performance with No Additive")
ax[0][0].plot(Time, ChamPres, 'r')
ax[0][0].set_xlabel('Time (s)')
ax[0][0].set_ylabel('Chamber Pressure (Pa)')

ax[0][1].set_title("Regresion rate Performance with No Additive")
ax[0][1].plot(Time, Reg, 'b')
ax[0][1].set_xlabel('Time (s)')
ax[0][1].set_ylabel('Regression Rate (m/s)')

ax[1][0].set_title("web thickness Performance with No Additive")
ax[1][0].plot(Time, w_value, 'g')
ax[1][0].set_xlabel('Time (s)')
ax[1][0].set_ylabel('Web Thickness (m)')

ax[1][1].set_title("Momentum Performance with No Additive")
ax[1][1].plot(Time, Momentum, 'm')
ax[1][1].set_xlabel('Time (s)')
ax[1][1].set_ylabel('Momentum (kg m/s)')

plt.tight_layout()
plt.show()
