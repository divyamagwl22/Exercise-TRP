import numpy as np
import matplotlib.pyplot as plt

# Constants
a = 5.132 #mm/s/MPa
n = 0.222 # - 
R_int = 12.5E-3 # m Initail radius
R_max = 38.4E-3 # m max radius 
Len_grain = 0.107 # m length of grain
Prop_den = 1841 # kg/m^3 propellent density
Dt = 7.8E-3 # m throut diamiter 
De = 16.74E-3 # m nozzle exit diamiter 
At = np.pi * (Dt/2)**2 # m^2 throut area
Ae = np.pi * (De/2)**2 # M^2 nozzle exit
R = 206.3 # 206.3E+6 # m^2 s^-2 K^-1 spicific gas constant 
Tc = 1558.722 # k Champer temperature 
c = 908 # 908E+3 #911E+3 # m/s characteristic velocity 
alp = 0.1 * 2*np.pi/360 # rads burn angle 
index = 0 # not used 
gam = 1.1209 # ratio of specific heats
Gam = np.sqrt(gam) * (2/(gam + 1)) ** ((gam + 1)/(2 * (gam - 1))) # Vandenkerckhove constant
Ae_At_giv = Ae/At

# initail values
Pc = 2E+6 #101325 # Pa chamber pressure 
Pa = 101325 # Pa atmospheric pressure 
dt = 0.001 # s time interval 
w = 0 # web thickness
Vc = np.pi * (R_int**2) * Len_grain # combustion volume 
t = 0 # time not used 

# Data Arrays
Time = []
Reg = []
w_value = []
ChamPres = []
Momentum = []

# Functions
def dw_dt(Pc):
    dw = r(Pc)

    return dw

def r(Pc): # converts to mm and Mpa then converts back to give r in m/s
    r_val = a * ((Pc * 1E-6) ** n)

    return r_val * 1E-3

def Ab(w): # calculates the burn area
    global state
    """
    if (w + R_int) < R_max:
        A = (2 * np.pi * (R_int + w) * Len_grain)
    else:
        A = 0
    """
    if w < Len_grain*np.tan(alp):
        A = (np.pi * (2*R_int + w) * w)/np.sin(alp)
        state = 1

    elif Len_grain*np.tan(alp) < w < R_max - R_int:
        A = (R_int + w) * (2*np.pi*Len_grain)/np.cos(alp) - np.pi * Len_grain**2 * (np.tan(alp)/np.cos(alp))
        state = 2

    elif R_max - R_int < w < R_max - R_int + Len_grain*np.tan(alp):
        x = R_int + w - Len_grain*np.tan(alp)
        A = (np.pi*(R_max + x)*(R_max - x))/np.sin(alp)
        state = 3

    else:
        A = 0
        state = 4
    
    return A

def dv_dt(Pc,w):
    dv = r(Pc) * Ab(w)

    return dv

def dPc_dt(Vc,Pc,w):
    dPc = ((R * Tc)/Vc) * (Prop_den * r(Pc) * Ab(w) - (Pc * At)/c) - (Pc/Vc)*dv_dt(Pc,w)

    return dPc

for t in np.arange(0,6,dt):
    # do calculations

    w = w + dw_dt(Pc)*dt

    Vc = Vc + dv_dt(Pc,w)*dt

    Pc = Pc + dPc_dt(Vc,Pc,w)*dt

    # grab data
    Time.append(t)
    Reg.append(r(Pc))
    w_value.append(w)
    ChamPres.append(Pc)

    # calculate and store momentum
    Momentum.append(Prop_den * Reg[-1] * Ab(w) * w * Len_grain)

# plot data
fig, ax = plt.subplots(2, 2, figsize=(12, 8))

ax[0][0].plot(Time, ChamPres, 'r')
ax[0][0].set_xlabel('Time (s)')
ax[0][0].set_ylabel('Chamber Pressure (Pa)')

ax[0][1].plot(Time, Reg, 'b')
ax[0][1].set_xlabel('Time (s)')
ax[0][1].set_ylabel('Regression Rate (m/s)')

ax[1][0].plot(Time, w_value, 'g')
ax[1][0].set_xlabel('Time (s)')
ax[1][0].set_ylabel('Web Thickness (m)')

ax[1][1].plot(Time, Momentum, 'm')
ax[1][1].set_xlabel('Time (s)')
ax[1][1].set_ylabel('Momentum (kg m/s)')

plt.tight_layout()
plt.show()
